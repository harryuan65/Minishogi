#include"head.h"
#ifndef _LIBRARY_
#define _LIBRARY_

/*	player	*/
enum {
	TURN_WHITE = 0, TURN_BLACK = 1
};

/*	board	*/
enum {
	// initialize board
	A5, A4, A3, A2, A1,
	B5, B4, B3, B2, B1,
	C5, C4, C3, C2, C1,
	D5, D4, D3, D2, D1,
	E5, E4, E3, E2, E1,

	//initialize white_hand
	F5, F4, F3, F2, F1, // R, R, B, B, G
	G5, G4, G3, G2, G1,	// G, S, S, P, P

	//initialize black_hand
	H5, H4, H3, H2, H1, // R, R, B, B, G
	I5, I4, I3, I2, I1	// G, S, S, P, P
};
#define HAND_SIZE  20
#define BOARD_SIZE 25
#define CHESS_BOARD_SIZE 45 // 20 + 25

/*	chess	*/
enum {				//Print usage
	PROMOTE = 8, BLANK = 0,
	// 1	   2     3       4     5     6 (pure)
	PAWN, SILVER, GOLD, BISHOP, ROOK, KING,
	// evolution
	//     9		10	   11       12     13
	//	1001	  1010	 1011     1100	 1101 (binary) -> ( pure | PROMOTE )
	ePAWN = 9, eSILVER, eNULL, eBISHOP, eROOK,
	bPAWN = 17, bSILVER, bGOLD, bBISHOP, bROOK, bKING,
	bePAWN = 25, beSILVER, 
	beBISHOP = 28, beROOK,

	CHESS_SIZE = 10
};


/*	bitboard	*/
enum ChessName {
	w_Pawn, b_Pawn,		//0 1
	w_Silver, b_Silver,	//2 3 
	w_Gold, b_Gold,
	w_Bishop, b_Bishop,
	w_Rook, b_Rook,
	w_King, b_King,
	w_e_Pawn, b_e_Pawn,
	w_e_Silver, b_e_Silver,
	w_e_Bishop, b_e_Bishop,
	w_e_Rook, b_e_Rook
};
class playerboard {
public:
	U32 occupied[2];
	U16 black_hand, white_hand;
	U32 chesspiece[20];
};



/*	generate ordering	*/
const int move_ordering[CHESS_SIZE] = {
	eROOK, eBISHOP, ROOK, BISHOP,
	eSILVER, ePAWN, GOLD, SILVER, PAWN, KING
};

const int attack_ordering[CHESS_SIZE] = {
	PAWN, SILVER, GOLD, ePAWN, eSILVER,
	BISHOP, ROOK, eBISHOP, eROOK, KING
};

const int white_pce_bias[CHESS_SIZE] = {
	0,	 2,	 4,	 6,	 8,
	10,	12,	14,	16,	18
};

const int black_pce_bias[CHESS_SIZE] = {
	1,	 3,	 5,	 7,	 9,
	11,	13,	15,	17,	19
};

/*	all chess move	*/
/*	king bit move	*/

//const U32 Move[20][BOARD_SIZE];


const U32 king_move[BOARD_SIZE] = {
	0x0000062, 	0x00000e5, 	0x00001ca, 	0x0000394, 	0x0000308,
	0x0000c43, 	0x0001ca7, 	0x000394e, 	0x000729c, 	0x0006118,
	0x0018860, 	0x00394e0, 	0x00729c0, 	0x00e5380, 	0x00c2300,
	0x0310c00, 	0x0729c00, 	0x0e53800, 	0x1ca7000, 	0x1846000,
	0x0218000, 	0x0538000, 	0x0a70000, 	0x14e0000, 	0x08c0000
};

/*	white gold bit move	*/
const U32 w_gold_move[BOARD_SIZE] = {
	0x0000022, 	0x0000045, 	0x000008a, 	0x0000114, 	0x0000208,
	0x0000443, 	0x00008a7, 	0x000114e, 	0x000229c, 	0x0004118,
	0x0008860, 	0x00114e0, 	0x00229c0, 	0x0045380,	0x0082300,
	0x0110c00, 	0x0229c00, 	0x0453800, 	0x08a7000,	0x1046000,
	0x0218000, 	0x0538000, 	0x0a70000, 	0x14e0000,	0x08c0000
};

/*	black gold bit move	*/
const U32 b_gold_move[BOARD_SIZE] = {
	0x0000062, 	0x00000e5, 	0x00001ca, 	0x0000394, 	0x0000308,
	0x0000c41, 	0x0001ca2, 	0x0003944, 	0x0007288, 	0x0006110,
	0x0018820, 	0x0039440, 	0x0072880, 	0x00e5100,	0x00c2200,
	0x0310400, 	0x0728800, 	0x0e51000, 	0x1ca2000,	0x1844000,
	0x0208000, 	0x0510000, 	0x0a20000, 	0x1440000,	0x0880000
};

/*	white silver bit move	*/
const U32 w_silver_move[BOARD_SIZE] = {
	0x0000040, 	0x00000a0, 	0x0000140, 	0x0000280, 	0x0000100,
	0x0000803, 	0x0001407, 	0x000280e, 	0x000501c, 	0x0002018,
	0x0010060, 	0x00280e0, 	0x00501c0, 	0x00a0380,	0x0040300,
	0x0200c00, 	0x0501c00, 	0x0a03800, 	0x1407000,	0x0806000,
	0x0018000, 	0x0038000, 	0x0070000, 	0x00e0000,	0x00c0000
};

/*	black silver bit move	*/
const U32 b_silver_move[BOARD_SIZE] = {
	0x0000060, 	0x00000e0, 	0x00001c0, 	0x0000380, 	0x0000300,
	0x0000c02, 	0x0001c05, 	0x000380a, 	0x0007014, 	0x0006008,
	0x0018040, 	0x00380a0, 	0x0070140, 	0x00e0280,	0x00c0100,
	0x0300800, 	0x0701400, 	0x0e02800, 	0x1c05000,	0x1802000,
	0x0010000, 	0x0028000, 	0x0050000, 	0x00a0000,	0x0040000
};

/*	white pawn bit move	*/
const U32 w_pawn_move[BOARD_SIZE] = {
	0x0000000, 	0x0000000, 	0x0000000, 	0x0000000, 	0x0000000,
	0x0000001, 	0x0000002, 	0x0000004, 	0x0000008, 	0x0000010,
	0x0000020, 	0x0000040, 	0x0000080, 	0x0000100,	0x0000200,
	0x0000400, 	0x0000800, 	0x0001000, 	0x0002000,	0x0004000,
	0x0008000, 	0x0010000, 	0x0020000, 	0x0040000,	0x0080000
};

/*	black pawn bit move	*/
const U32 b_pawn_move[BOARD_SIZE] = {
	0x0000020, 	0x0000040, 	0x0000080, 	0x0000100, 	0x0000200,
	0x0000400, 	0x0000800, 	0x0001000, 	0x0002000, 	0x0004000,
	0x0008000, 	0x0010000, 	0x0020000, 	0x0040000,	0x0080000,
	0x0100000, 	0x0200000, 	0x0400000, 	0x0800000,	0x1000000,
	0x0000000, 	0x0000000, 	0x0000000, 	0x0000000,	0x0000000
};

/*	rook attack which it needs	*/
/*	file upper	*/
const U32 column_upper[BOARD_SIZE] = {
	0x0108420,	0x0210840,  0x0421080, 	0x0842100,	0x1084200,
	0x0108400,	0x0210800,	0x0421000,	0x0842000,	0x1084000,
	0x0108000,	0x0210000,	0x0420000,	0x0840000,	0x1080000,
	0x0100000,	0x0200000,	0x0400000,	0x0800000,	0x1000000,
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000
};


/*	file lower	*/
const U32 column_lower[BOARD_SIZE] = {
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000,
	0x0000001,	0x0000002,	0x0000004,	0x0000008,	0x0000010,
	0x0000021,	0x0000042,	0x0000084,	0x0000108,	0x0000210,
	0x0000421,	0x0000842,	0x0001084,	0x0002108,	0x0004210,
	0x0008421,	0x0010842,	0x0021084,	0x0042108,	0x0084210

};

/*	rank upper	*/
const U32 row_upper[BOARD_SIZE] = {
	0x000001e, 	0x000001c, 	0x0000018, 	0x0000010, 	0x0000000,
	0x00003c0, 	0x0000380, 	0x0000300, 	0x0000200, 	0x0000000,
	0x0007800, 	0x0007000, 	0x0006000, 	0x0004000,	0x0000000,
	0x00f0000, 	0x00e0000, 	0x00c0000, 	0x0080000,	0x0000000,
	0x1e00000, 	0x1c00000, 	0x1800000,  0x1000000,	0x0000000
};

/*	rank lower	*/
const U32 row_lower[BOARD_SIZE] = {
	0x0000000, 	0x0000001, 	0x0000003, 	0x0000007, 	0x000000f,
	0x0000000, 	0x0000020, 	0x0000060,  0x00000e0, 	0x00001e0,
	0x0000000, 	0x0000400, 	0x0000c00, 	0x0001c00,	0x0003c00,
	0x0000000, 	0x0008000, 	0x0018000, 	0x0038000,	0x0078000,
	0x0000000, 	0x0100000, 	0x0300000, 	0x0700000,	0x0f00000
};

/*	bishop attack which it needs	*/
/*	slope1 -> '/'	*/
/*	slope1 upper	*/
const U32 slope1_upper[BOARD_SIZE] = {
	0x0000000,	0x0000020,	0x0000440,	0x0008880,	0x0111100,
	0x0000000,	0x0000400,	0x0008800,	0x0111000,	0x0222000,
	0x0000000,	0x0008000,	0x0110000,	0x0220000,	0x0440000,
	0x0000000,	0x0100000,	0x0200000,	0x0400000,	0x0800000,
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000
};

/*	slope1 lower	*/
const U32 slope1_lower[BOARD_SIZE] = {
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000,
	0x0000002,	0x0000004,	0x0000008,	0x0000010,	0x0000000,
	0x0000044,	0x0000088,	0x0000110,	0x0000200,	0x0000000,
	0x0000888,	0x0001110,	0x0002200,	0x0004000,	0x0000000,
	0x0011110,	0x0022200,	0x0044000,	0x0080000,	0x0000000
};

/*	slope2 -> '\'	*/
/*	slope2 upper	*/
const U32 slope2_upper[BOARD_SIZE] = {
	0x1041040,	0x0082080,	0x0004100,	0x0000200,	0x0000000,
	0x0820800,	0x1041000,	0x0082000,	0x0004000,	0x0000000,
	0x0410000,	0x0820000,	0x1040000,	0x0080000,	0x0000000,
	0x0200000,	0x0400000,	0x0800000,	0x1000000,	0x0000000,
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000
};

/*	slope2 lower	*/
const U32 slope2_lower[BOARD_SIZE] = {
	0x0000000,	0x0000000,	0x0000000,	0x0000000,	0x0000000,
	0x0000000,	0x0000001,	0x0000002,	0x0000004,	0x0000008,
	0x0000000,	0x0000020,	0x0000041,	0x0000082,	0x0000104,
	0x0000000,	0x0000400,	0x0000820,	0x0001041,	0x0002082,
	0x0000000,	0x0008000,	0x0010400,	0x0020820,	0x0041041
};

#endif